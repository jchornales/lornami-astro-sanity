---
import { useLoadQuery } from "@/sanity/lib/useLoadQuery";
import { useUrlForImage } from "@/sanity/lib/useUrlForImage";
import type { SanityDocument } from "@sanity/client";
import { getImage } from "astro:assets";
import "@styles/Banner.css";

const { data: images } = await useLoadQuery<SanityDocument[]>({
  query: `*[_type == "images" && slug.current == "need-a-photographer-banner"]`,
});

const banner = await getImage({
  src: useUrlForImage(images[0].image).url(),
  format: "webp",
  inferSize: true,
});
---

<div
  class="banner-wrapper"
  data-attribute="dark"
  style={{ backgroundImage: `url(${banner.src})` }}
>
  <p class="text --small">Need a photographer?</p>
  <a href="#" class="text --large">Let's work together</a>
  <div class="banner-overlay"></div>
</div>

<script>
  const element = document.querySelector(".banner-wrapper");

  function disableScroll() {
    window.addEventListener("wheel", preventScroll, { passive: false });
  }

  function enableScroll() {
    window.removeEventListener("wheel", preventScroll);
  }

  function preventScroll(e: Event) {
    e.preventDefault();
  }

  const observerCallback = (entries: IntersectionObserverEntry[]) => {
    entries.forEach((entry) => {
      if (entry.intersectionRatio >= 0.5) {
        disableScroll();
        const elementPosition = entry.boundingClientRect.top;
        window.scrollTo({
          top: elementPosition + window.scrollY,
          left: 100,
          behavior: "smooth",
        });

        setTimeout(() => {
          enableScroll();
        }, 1000);
      }
    });
  };

  const observerOptions = {
    threshold: 0.5,
  };

  const observer = new IntersectionObserver(observerCallback, observerOptions);

  if (element) {
    observer.observe(element);
  }
</script>
